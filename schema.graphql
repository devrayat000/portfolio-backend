# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Admin {
  id: ID!
  name: String
  email: String
  password: PasswordState
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input AdminWhereUniqueInput {
  id: ID
  email: String
}

input AdminWhereInput {
  AND: [AdminWhereInput!]
  OR: [AdminWhereInput!]
  NOT: [AdminWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input AdminOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input AdminUpdateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

input AdminUpdateArgs {
  where: AdminWhereUniqueInput!
  data: AdminUpdateInput!
}

input AdminCreateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

type Project {
  id: ID!
  title: String
  demo: String
  description: Project_description_Document
  source: String
  status: ProjectStatusType
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  images(
    where: ImageWhereInput! = {}
    orderBy: [ImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Image!]
  imagesCount(where: ImageWhereInput! = {}): Int
  publishedAt: DateTime
  createdAt: DateTime
}

type Project_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

enum ProjectStatusType {
  published
  draft
}

input ProjectWhereUniqueInput {
  id: ID
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
  id: IDFilter
  title: StringFilter
  demo: StringFilter
  source: StringFilter
  status: ProjectStatusTypeNullableFilter
  tags: TagManyRelationFilter
  images: ImageManyRelationFilter
  publishedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
}

input ProjectStatusTypeNullableFilter {
  equals: ProjectStatusType
  in: [ProjectStatusType!]
  notIn: [ProjectStatusType!]
  not: ProjectStatusTypeNullableFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input ImageManyRelationFilter {
  every: ImageWhereInput
  some: ImageWhereInput
  none: ImageWhereInput
}

input ProjectOrderByInput {
  id: OrderDirection
  title: OrderDirection
  demo: OrderDirection
  source: OrderDirection
  status: OrderDirection
  publishedAt: OrderDirection
  createdAt: OrderDirection
}

input ProjectUpdateInput {
  title: String
  demo: String
  description: JSON
  source: String
  status: ProjectStatusType
  tags: TagRelateToManyForUpdateInput
  images: ImageRelateToManyForUpdateInput
  publishedAt: DateTime
  createdAt: DateTime
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input ImageRelateToManyForUpdateInput {
  disconnect: [ImageWhereUniqueInput!]
  set: [ImageWhereUniqueInput!]
  create: [ImageCreateInput!]
  connect: [ImageWhereUniqueInput!]
}

input ProjectUpdateArgs {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateInput!
}

input ProjectCreateInput {
  title: String
  demo: String
  description: JSON
  source: String
  status: ProjectStatusType
  tags: TagRelateToManyForCreateInput
  images: ImageRelateToManyForCreateInput
  publishedAt: DateTime
  createdAt: DateTime
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input ImageRelateToManyForCreateInput {
  create: [ImageCreateInput!]
  connect: [ImageWhereUniqueInput!]
}

type Image {
  id: ID!
  label: String
  image: AzureStorageImageFieldOutput
  createdAt: DateTime
}

interface AzureStorageImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: AzureStorageImageExtension!
  ref: String!
  url: String!
}

enum AzureStorageImageExtension {
  jpg
  png
  webp
  gif
}

input ImageWhereUniqueInput {
  id: ID
}

input ImageWhereInput {
  AND: [ImageWhereInput!]
  OR: [ImageWhereInput!]
  NOT: [ImageWhereInput!]
  id: IDFilter
  label: StringFilter
  createdAt: DateTimeNullableFilter
}

input ImageOrderByInput {
  id: OrderDirection
  label: OrderDirection
  createdAt: OrderDirection
}

input ImageUpdateInput {
  label: String
  image: AzureStorageImageFieldInput
  createdAt: DateTime
}

input AzureStorageImageFieldInput {
  upload: Upload
  ref: String
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input ImageUpdateArgs {
  where: ImageWhereUniqueInput!
  data: ImageUpdateInput!
}

input ImageCreateInput {
  label: String
  image: AzureStorageImageFieldInput
  createdAt: DateTime
}

type Tag {
  id: ID!
  name: String
  projects(
    where: ProjectWhereInput! = {}
    orderBy: [ProjectOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Project!]
  projectsCount(where: ProjectWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  projects: ProjectManyRelationFilter
}

input ProjectManyRelationFilter {
  every: ProjectWhereInput
  some: ProjectWhereInput
  none: ProjectWhereInput
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  projects: ProjectRelateToManyForUpdateInput
}

input ProjectRelateToManyForUpdateInput {
  disconnect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  create: [ProjectCreateInput!]
  connect: [ProjectWhereUniqueInput!]
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  projects: ProjectRelateToManyForCreateInput
}

input ProjectRelateToManyForCreateInput {
  create: [ProjectCreateInput!]
  connect: [ProjectWhereUniqueInput!]
}

type ApiKey {
  id: ID!
  createdAt: DateTime
}

input ApiKeyWhereUniqueInput {
  id: ID
}

input ApiKeyWhereInput {
  AND: [ApiKeyWhereInput!]
  OR: [ApiKeyWhereInput!]
  NOT: [ApiKeyWhereInput!]
  id: IDFilter
  createdAt: DateTimeNullableFilter
}

input ApiKeyOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
}

input ApiKeyUpdateInput {
  createdAt: DateTime
}

input ApiKeyUpdateArgs {
  where: ApiKeyWhereUniqueInput!
  data: ApiKeyUpdateInput!
}

input ApiKeyCreateInput {
  createdAt: DateTime
}

type Service {
  id: ID!
  title: String
  details: String
  image: AzureStorageImageFieldOutput
}

input ServiceWhereUniqueInput {
  id: ID
}

type AzureStorageImageFieldOutputType implements AzureStorageImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: AzureStorageImageExtension!
  ref: String!
  url: String!
}

input ServiceWhereInput {
  AND: [ServiceWhereInput!]
  OR: [ServiceWhereInput!]
  NOT: [ServiceWhereInput!]
  id: IDFilter
  title: StringFilter
  details: StringFilter
}

input ServiceOrderByInput {
  id: OrderDirection
  title: OrderDirection
  details: OrderDirection
}

input ServiceUpdateInput {
  title: String
  details: String
  image: AzureStorageImageFieldInput
}

input ServiceUpdateArgs {
  where: ServiceWhereUniqueInput!
  data: ServiceUpdateInput!
}

input ServiceCreateInput {
  title: String
  details: String
  image: AzureStorageImageFieldInput
}

type Skill {
  id: ID!
  type: SkillTypeType
  label: String
  value: Int
}

enum SkillTypeType {
  lang
  dev
}

input SkillWhereUniqueInput {
  id: ID
}

input SkillWhereInput {
  AND: [SkillWhereInput!]
  OR: [SkillWhereInput!]
  NOT: [SkillWhereInput!]
  id: IDFilter
  type: SkillTypeTypeNullableFilter
  label: StringFilter
  value: IntFilter
}

input SkillTypeTypeNullableFilter {
  equals: SkillTypeType
  in: [SkillTypeType!]
  notIn: [SkillTypeType!]
  not: SkillTypeTypeNullableFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input SkillOrderByInput {
  id: OrderDirection
  type: OrderDirection
  label: OrderDirection
  value: OrderDirection
}

input SkillUpdateInput {
  type: SkillTypeType
  label: String
  value: Int
}

input SkillUpdateArgs {
  where: SkillWhereUniqueInput!
  data: SkillUpdateInput!
}

input SkillCreateInput {
  type: SkillTypeType
  label: String
  value: Int
}

type Education {
  id: ID!
  title: String
  passed: DateTime
  certificate: String
  description: Education_description_Document
}

type Education_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input EducationWhereUniqueInput {
  id: ID
}

input EducationWhereInput {
  AND: [EducationWhereInput!]
  OR: [EducationWhereInput!]
  NOT: [EducationWhereInput!]
  id: IDFilter
  title: StringFilter
  passed: DateTimeFilter
  certificate: StringFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input EducationOrderByInput {
  id: OrderDirection
  title: OrderDirection
  passed: OrderDirection
  certificate: OrderDirection
}

input EducationUpdateInput {
  title: String
  passed: DateTime
  certificate: String
  description: JSON
}

input EducationUpdateArgs {
  where: EducationWhereUniqueInput!
  data: EducationUpdateInput!
}

input EducationCreateInput {
  title: String
  passed: DateTime
  certificate: String
  description: JSON
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createAdmin(data: AdminCreateInput!): Admin
  createAdmins(data: [AdminCreateInput!]!): [Admin]
  updateAdmin(where: AdminWhereUniqueInput!, data: AdminUpdateInput!): Admin
  updateAdmins(data: [AdminUpdateArgs!]!): [Admin]
  deleteAdmin(where: AdminWhereUniqueInput!): Admin
  deleteAdmins(where: [AdminWhereUniqueInput!]!): [Admin]
  createProject(data: ProjectCreateInput!): Project
  createProjects(data: [ProjectCreateInput!]!): [Project]
  updateProject(
    where: ProjectWhereUniqueInput!
    data: ProjectUpdateInput!
  ): Project
  updateProjects(data: [ProjectUpdateArgs!]!): [Project]
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteProjects(where: [ProjectWhereUniqueInput!]!): [Project]
  createImage(data: ImageCreateInput!): Image
  createImages(data: [ImageCreateInput!]!): [Image]
  updateImage(where: ImageWhereUniqueInput!, data: ImageUpdateInput!): Image
  updateImages(data: [ImageUpdateArgs!]!): [Image]
  deleteImage(where: ImageWhereUniqueInput!): Image
  deleteImages(where: [ImageWhereUniqueInput!]!): [Image]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createApiKey(data: ApiKeyCreateInput!): ApiKey
  createApiKeys(data: [ApiKeyCreateInput!]!): [ApiKey]
  updateApiKey(where: ApiKeyWhereUniqueInput!, data: ApiKeyUpdateInput!): ApiKey
  updateApiKeys(data: [ApiKeyUpdateArgs!]!): [ApiKey]
  deleteApiKey(where: ApiKeyWhereUniqueInput!): ApiKey
  deleteApiKeys(where: [ApiKeyWhereUniqueInput!]!): [ApiKey]
  createService(data: ServiceCreateInput!): Service
  createServices(data: [ServiceCreateInput!]!): [Service]
  updateService(
    where: ServiceWhereUniqueInput!
    data: ServiceUpdateInput!
  ): Service
  updateServices(data: [ServiceUpdateArgs!]!): [Service]
  deleteService(where: ServiceWhereUniqueInput!): Service
  deleteServices(where: [ServiceWhereUniqueInput!]!): [Service]
  createSkill(data: SkillCreateInput!): Skill
  createSkills(data: [SkillCreateInput!]!): [Skill]
  updateSkill(where: SkillWhereUniqueInput!, data: SkillUpdateInput!): Skill
  updateSkills(data: [SkillUpdateArgs!]!): [Skill]
  deleteSkill(where: SkillWhereUniqueInput!): Skill
  deleteSkills(where: [SkillWhereUniqueInput!]!): [Skill]
  createEducation(data: EducationCreateInput!): Education
  createEducations(data: [EducationCreateInput!]!): [Education]
  updateEducation(
    where: EducationWhereUniqueInput!
    data: EducationUpdateInput!
  ): Education
  updateEducations(data: [EducationUpdateArgs!]!): [Education]
  deleteEducation(where: EducationWhereUniqueInput!): Education
  deleteEducations(where: [EducationWhereUniqueInput!]!): [Education]
  endSession: Boolean!
  authenticateAdminWithPassword(
    email: String!
    password: String!
  ): AdminAuthenticationWithPasswordResult
  createInitialAdmin(
    data: CreateInitialAdminInput!
  ): AdminAuthenticationWithPasswordSuccess!
}

union AdminAuthenticationWithPasswordResult =
    AdminAuthenticationWithPasswordSuccess
  | AdminAuthenticationWithPasswordFailure

type AdminAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: Admin!
}

type AdminAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialAdminInput {
  name: String
  email: String
  password: String
}

type Query {
  admins(
    where: AdminWhereInput! = {}
    orderBy: [AdminOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Admin!]
  admin(where: AdminWhereUniqueInput!): Admin
  adminsCount(where: AdminWhereInput! = {}): Int
  projects(
    where: ProjectWhereInput! = {}
    orderBy: [ProjectOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Project!]
  project(where: ProjectWhereUniqueInput!): Project
  projectsCount(where: ProjectWhereInput! = {}): Int
  images(
    where: ImageWhereInput! = {}
    orderBy: [ImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Image!]
  image(where: ImageWhereUniqueInput!): Image
  imagesCount(where: ImageWhereInput! = {}): Int
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  apiKeys(
    where: ApiKeyWhereInput! = {}
    orderBy: [ApiKeyOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ApiKey!]
  apiKey(where: ApiKeyWhereUniqueInput!): ApiKey
  apiKeysCount(where: ApiKeyWhereInput! = {}): Int
  services(
    where: ServiceWhereInput! = {}
    orderBy: [ServiceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Service!]
  service(where: ServiceWhereUniqueInput!): Service
  servicesCount(where: ServiceWhereInput! = {}): Int
  skills(
    where: SkillWhereInput! = {}
    orderBy: [SkillOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Skill!]
  skill(where: SkillWhereUniqueInput!): Skill
  skillsCount(where: SkillWhereInput! = {}): Int
  educations(
    where: EducationWhereInput! = {}
    orderBy: [EducationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Education!]
  education(where: EducationWhereUniqueInput!): Education
  educationsCount(where: EducationWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = Admin

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
